/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.service.transport.swagger.api;

import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiCallback;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiClient;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiException;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiResponse;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.Configuration;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.Pair;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ProgressRequestBody;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.skbkontur.sdk.extern.service.transport.swagger.model.Docflow;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.Document;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.DocumentDescription;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.DocumentToSend;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.Error;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.Signature;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocflowsApi {
    private ApiClient apiClient;

    public DocflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocflowsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for docflowsGetDecryptedDocumentContentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDecryptedDocumentContentAsyncCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/content/decrypted"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDecryptedDocumentContentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDecryptedDocumentContentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDecryptedDocumentContentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDecryptedDocumentContentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDecryptedDocumentContentAsyncCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete decrypted document content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] docflowsGetDecryptedDocumentContentAsync(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        ApiResponse<byte[]> resp = docflowsGetDecryptedDocumentContentAsyncWithHttpInfo(accountId, docflowId, documentId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete decrypted document content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> docflowsGetDecryptedDocumentContentAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDecryptedDocumentContentAsyncValidateBeforeCall(accountId, docflowId, documentId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete decrypted document content from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDecryptedDocumentContentAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDecryptedDocumentContentAsyncValidateBeforeCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocflowAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocflowAsyncCall(UUID accountId, UUID docflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocflowAsyncValidateBeforeCall(UUID accountId, UUID docflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocflowAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocflowAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocflowAsyncCall(accountId, docflowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get Docflow object
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @return Docflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Docflow docflowsGetDocflowAsync(UUID accountId, UUID docflowId) throws ApiException {
        ApiResponse<Docflow> resp = docflowsGetDocflowAsyncWithHttpInfo(accountId, docflowId);
        return resp.getData();
    }

    /**
     * Allow API user to get Docflow object
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @return ApiResponse&lt;Docflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Docflow> docflowsGetDocflowAsyncWithHttpInfo(UUID accountId, UUID docflowId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocflowAsyncValidateBeforeCall(accountId, docflowId, null, null);
        Type localVarReturnType = new TypeToken<Docflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get Docflow object (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocflowAsyncAsync(UUID accountId, UUID docflowId, final ApiCallback<Docflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocflowAsyncValidateBeforeCall(accountId, docflowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Docflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentAsyncCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDocumentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentAsyncCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete document from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document docflowsGetDocumentAsync(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        ApiResponse<Document> resp = docflowsGetDocumentAsyncWithHttpInfo(accountId, docflowId, documentId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete document from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> docflowsGetDocumentAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentAsyncValidateBeforeCall(accountId, docflowId, documentId, null, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete document from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentAsyncValidateBeforeCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentDescriptionAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentDescriptionAsyncCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/description"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentDescriptionAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentDescriptionAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentDescriptionAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDocumentDescriptionAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentDescriptionAsyncCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete document description from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return DocumentDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentDescription docflowsGetDocumentDescriptionAsync(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        ApiResponse<DocumentDescription> resp = docflowsGetDocumentDescriptionAsyncWithHttpInfo(accountId, docflowId, documentId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete document description from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return ApiResponse&lt;DocumentDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentDescription> docflowsGetDocumentDescriptionAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentDescriptionAsyncValidateBeforeCall(accountId, docflowId, documentId, null, null);
        Type localVarReturnType = new TypeToken<DocumentDescription>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete document description from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentDescriptionAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, final ApiCallback<DocumentDescription> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentDescriptionAsyncValidateBeforeCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentDescription>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentSignatureAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignatureAsyncCall(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/signatures/{signatureId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "signatureId" + "\\}", apiClient.escapeString(signatureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentSignatureAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentSignatureAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentSignatureAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDocumentSignatureAsync(Async)");
        }
        
        // verify the required parameter 'signatureId' is set
        if (signatureId == null) {
            throw new ApiException("Missing the required parameter 'signatureId' when calling docflowsGetDocumentSignatureAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureAsyncCall(accountId, docflowId, documentId, signatureId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete document single signature from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @return Signature
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Signature docflowsGetDocumentSignatureAsync(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId) throws ApiException {
        ApiResponse<Signature> resp = docflowsGetDocumentSignatureAsyncWithHttpInfo(accountId, docflowId, documentId, signatureId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete document single signature from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @return ApiResponse&lt;Signature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Signature> docflowsGetDocumentSignatureAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureAsyncValidateBeforeCall(accountId, docflowId, documentId, signatureId, null, null);
        Type localVarReturnType = new TypeToken<Signature>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete document single signature from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignatureAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ApiCallback<Signature> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureAsyncValidateBeforeCall(accountId, docflowId, documentId, signatureId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Signature>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentSignatureContentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignatureContentAsyncCall(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/signatures/{signatureId}/content"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "signatureId" + "\\}", apiClient.escapeString(signatureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentSignatureContentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentSignatureContentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentSignatureContentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDocumentSignatureContentAsync(Async)");
        }
        
        // verify the required parameter 'signatureId' is set
        if (signatureId == null) {
            throw new ApiException("Missing the required parameter 'signatureId' when calling docflowsGetDocumentSignatureContentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureContentAsyncCall(accountId, docflowId, documentId, signatureId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete document signature single content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] docflowsGetDocumentSignatureContentAsync(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId) throws ApiException {
        ApiResponse<byte[]> resp = docflowsGetDocumentSignatureContentAsyncWithHttpInfo(accountId, docflowId, documentId, signatureId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete document signature single content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> docflowsGetDocumentSignatureContentAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureContentAsyncValidateBeforeCall(accountId, docflowId, documentId, signatureId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete document signature single content from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param signatureId Signature identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignatureContentAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, UUID signatureId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentSignatureContentAsyncValidateBeforeCall(accountId, docflowId, documentId, signatureId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentSignaturesAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignaturesAsyncCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/signatures"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentSignaturesAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentSignaturesAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentSignaturesAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetDocumentSignaturesAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentSignaturesAsyncCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete document signatures from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return List&lt;Signature&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Signature> docflowsGetDocumentSignaturesAsync(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        ApiResponse<List<Signature>> resp = docflowsGetDocumentSignaturesAsyncWithHttpInfo(accountId, docflowId, documentId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete document signatures from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return ApiResponse&lt;List&lt;Signature&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Signature>> docflowsGetDocumentSignaturesAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentSignaturesAsyncValidateBeforeCall(accountId, docflowId, documentId, null, null);
        Type localVarReturnType = new TypeToken<List<Signature>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete document signatures from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentSignaturesAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, final ApiCallback<List<Signature>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentSignaturesAsyncValidateBeforeCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Signature>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetDocumentsAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentsAsyncCall(UUID accountId, UUID docflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetDocumentsAsyncValidateBeforeCall(UUID accountId, UUID docflowId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetDocumentsAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetDocumentsAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetDocumentsAsyncCall(accountId, docflowId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get all document from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Document> docflowsGetDocumentsAsync(UUID accountId, UUID docflowId) throws ApiException {
        ApiResponse<List<Document>> resp = docflowsGetDocumentsAsyncWithHttpInfo(accountId, docflowId);
        return resp.getData();
    }

    /**
     * Allow API user to get all document from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Document>> docflowsGetDocumentsAsyncWithHttpInfo(UUID accountId, UUID docflowId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetDocumentsAsyncValidateBeforeCall(accountId, docflowId, null, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get all document from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetDocumentsAsyncAsync(UUID accountId, UUID docflowId, final ApiCallback<List<Document>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetDocumentsAsyncValidateBeforeCall(accountId, docflowId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetEncryptedDocumentContentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetEncryptedDocumentContentAsyncCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/content/encrypted"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetEncryptedDocumentContentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetEncryptedDocumentContentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetEncryptedDocumentContentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetEncryptedDocumentContentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetEncryptedDocumentContentAsyncCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get discrete encrypted document content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] docflowsGetEncryptedDocumentContentAsync(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        ApiResponse<byte[]> resp = docflowsGetEncryptedDocumentContentAsyncWithHttpInfo(accountId, docflowId, documentId);
        return resp.getData();
    }

    /**
     * Allow API user to get discrete encrypted document content from docflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> docflowsGetEncryptedDocumentContentAsyncWithHttpInfo(UUID accountId, UUID docflowId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetEncryptedDocumentContentAsyncValidateBeforeCall(accountId, docflowId, documentId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get discrete encrypted document content from docflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow object identifier (required)
     * @param documentId Document identifier (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetEncryptedDocumentContentAsyncAsync(UUID accountId, UUID docflowId, UUID documentId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetEncryptedDocumentContentAsyncValidateBeforeCall(accountId, docflowId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsGetReplyDocumentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Docflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param thumbprint Signer certificate thumbprint (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsGetReplyDocumentAsyncCall(UUID accountId, UUID docflowId, String documentType, UUID documentId, String thumbprint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/reply/{documentType}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (thumbprint != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "thumbprint", thumbprint));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsGetReplyDocumentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, String documentType, UUID documentId, String thumbprint, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsGetReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsGetReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling docflowsGetReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsGetReplyDocumentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsGetReplyDocumentAsyncCall(accountId, docflowId, documentType, documentId, thumbprint, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to get Reply document for specified workflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param thumbprint Signer certificate thumbprint (optional)
     * @return DocumentToSend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentToSend docflowsGetReplyDocumentAsync(UUID accountId, UUID docflowId, String documentType, UUID documentId, String thumbprint) throws ApiException {
        ApiResponse<DocumentToSend> resp = docflowsGetReplyDocumentAsyncWithHttpInfo(accountId, docflowId, documentType, documentId, thumbprint);
        return resp.getData();
    }

    /**
     * Allow API user to get Reply document for specified workflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param thumbprint Signer certificate thumbprint (optional)
     * @return ApiResponse&lt;DocumentToSend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentToSend> docflowsGetReplyDocumentAsyncWithHttpInfo(UUID accountId, UUID docflowId, String documentType, UUID documentId, String thumbprint) throws ApiException {
        com.squareup.okhttp.Call call = docflowsGetReplyDocumentAsyncValidateBeforeCall(accountId, docflowId, documentType, documentId, thumbprint, null, null);
        Type localVarReturnType = new TypeToken<DocumentToSend>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to get Reply document for specified workflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Docflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param thumbprint Signer certificate thumbprint (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsGetReplyDocumentAsyncAsync(UUID accountId, UUID docflowId, String documentType, UUID documentId, String thumbprint, final ApiCallback<DocumentToSend> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsGetReplyDocumentAsyncValidateBeforeCall(accountId, docflowId, documentType, documentId, thumbprint, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentToSend>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for docflowsSendReplyDocumentAsync
     * @param accountId Account identifier (required)
     * @param docflowId Dockflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param document Reply document to be sent (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call docflowsSendReplyDocumentAsyncCall(UUID accountId, UUID docflowId, String documentType, UUID documentId, DocumentToSend document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = document;
        
        // create path and map variables
        String localVarPath = "/v1/{accountId}/docflows/{docflowId}/documents/{documentId}/reply/{documentType}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()))
            .replaceAll("\\{" + "docflowId" + "\\}", apiClient.escapeString(docflowId.toString()))
            .replaceAll("\\{" + "documentType" + "\\}", apiClient.escapeString(documentType.toString()))
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call docflowsSendReplyDocumentAsyncValidateBeforeCall(UUID accountId, UUID docflowId, String documentType, UUID documentId, DocumentToSend document, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling docflowsSendReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'docflowId' is set
        if (docflowId == null) {
            throw new ApiException("Missing the required parameter 'docflowId' when calling docflowsSendReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentType' is set
        if (documentType == null) {
            throw new ApiException("Missing the required parameter 'documentType' when calling docflowsSendReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling docflowsSendReplyDocumentAsync(Async)");
        }
        
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling docflowsSendReplyDocumentAsync(Async)");
        }
        
        
        com.squareup.okhttp.Call call = docflowsSendReplyDocumentAsyncCall(accountId, docflowId, documentType, documentId, document, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allow API user to send Reply document for specified workflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Dockflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param document Reply document to be sent (required)
     * @return Docflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Docflow docflowsSendReplyDocumentAsync(UUID accountId, UUID docflowId, String documentType, UUID documentId, DocumentToSend document) throws ApiException {
        ApiResponse<Docflow> resp = docflowsSendReplyDocumentAsyncWithHttpInfo(accountId, docflowId, documentType, documentId, document);
        return resp.getData();
    }

    /**
     * Allow API user to send Reply document for specified workflow
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Dockflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param document Reply document to be sent (required)
     * @return ApiResponse&lt;Docflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Docflow> docflowsSendReplyDocumentAsyncWithHttpInfo(UUID accountId, UUID docflowId, String documentType, UUID documentId, DocumentToSend document) throws ApiException {
        com.squareup.okhttp.Call call = docflowsSendReplyDocumentAsyncValidateBeforeCall(accountId, docflowId, documentType, documentId, document, null, null);
        Type localVarReturnType = new TypeToken<Docflow>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allow API user to send Reply document for specified workflow (asynchronously)
     * 
     * @param accountId Account identifier (required)
     * @param docflowId Dockflow identifier (required)
     * @param documentType Document type (required)
     * @param documentId Document identifier (required)
     * @param document Reply document to be sent (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call docflowsSendReplyDocumentAsyncAsync(UUID accountId, UUID docflowId, String documentType, UUID documentId, DocumentToSend document, final ApiCallback<Docflow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = docflowsSendReplyDocumentAsyncValidateBeforeCall(accountId, docflowId, documentType, documentId, document, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Docflow>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
