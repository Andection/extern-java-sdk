/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.service.transport.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.DocumentSender;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.Taxpayer;

/**
 * AdditionalClientInfo
 */

public class AdditionalClientInfo {
  /**
   * Gets or Sets signerType
   */
  @JsonAdapter(SignerTypeEnum.Adapter.class)
  public enum SignerTypeEnum {
    UNKNOWN("unknown"),
    
    CHIEF("chief"),
    
    REPRESENTATIVE("representative");

    private String value;

    SignerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignerTypeEnum fromValue(String text) {
      for (SignerTypeEnum b : SignerTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SignerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SignerTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("signer-type")
  private SignerTypeEnum signerType = null;

  @SerializedName("document-sender")
  private DocumentSender documentSender = null;

  @SerializedName("taxpayer")
  private Taxpayer taxpayer = null;

  public AdditionalClientInfo signerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
    return this;
  }

   /**
   * Get signerType
   * @return signerType
  **/
  @ApiModelProperty(value = "")
  public SignerTypeEnum getSignerType() {
    return signerType;
  }

  public void setSignerType(SignerTypeEnum signerType) {
    this.signerType = signerType;
  }

  public AdditionalClientInfo documentSender(DocumentSender documentSender) {
    this.documentSender = documentSender;
    return this;
  }

   /**
   * Get documentSender
   * @return documentSender
  **/
  @ApiModelProperty(value = "")
  public DocumentSender getDocumentSender() {
    return documentSender;
  }

  public void setDocumentSender(DocumentSender documentSender) {
    this.documentSender = documentSender;
  }

  public AdditionalClientInfo taxpayer(Taxpayer taxpayer) {
    this.taxpayer = taxpayer;
    return this;
  }

   /**
   * Get taxpayer
   * @return taxpayer
  **/
  @ApiModelProperty(value = "")
  public Taxpayer getTaxpayer() {
    return taxpayer;
  }

  public void setTaxpayer(Taxpayer taxpayer) {
    this.taxpayer = taxpayer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalClientInfo additionalClientInfo = (AdditionalClientInfo) o;
    return Objects.equals(this.signerType, additionalClientInfo.signerType) &&
        Objects.equals(this.documentSender, additionalClientInfo.documentSender) &&
        Objects.equals(this.taxpayer, additionalClientInfo.taxpayer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(signerType, documentSender, taxpayer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalClientInfo {\n");
    
    sb.append("    signerType: ").append(toIndentedString(signerType)).append("\n");
    sb.append("    documentSender: ").append(toIndentedString(documentSender)).append("\n");
    sb.append("    taxpayer: ").append(toIndentedString(taxpayer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

