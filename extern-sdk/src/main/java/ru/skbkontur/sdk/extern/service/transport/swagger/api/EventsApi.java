/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.service.transport.swagger.api;

import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiCallback;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiClient;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiException;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ApiResponse;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.Configuration;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.Pair;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ProgressRequestBody;
import ru.skbkontur.sdk.extern.service.transport.swagger.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.skbkontur.sdk.extern.service.transport.swagger.model.Error;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.EventsPage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient apiClient;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for eventsGetEvents
     * @param fromId Event Id from which data is read out (required)
     * @param batchSize Max count of events to be returned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventsCall(String fromId, Integer batchSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fromId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fromId", fromId));
        if (batchSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "batchSize", batchSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "auth.sid" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsGetEventsValidateBeforeCall(String fromId, Integer batchSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fromId' is set
        if (fromId == null) {
            throw new ApiException("Missing the required parameter 'fromId' when calling eventsGetEvents(Async)");
        }
        
        // verify the required parameter 'batchSize' is set
        if (batchSize == null) {
            throw new ApiException("Missing the required parameter 'batchSize' when calling eventsGetEvents(Async)");
        }
        
        
        com.squareup.okhttp.Call call = eventsGetEventsCall(fromId, batchSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Shows docflow events for all users and accounts connected with external service (e.g.: bank)
     * 
     * @param fromId Event Id from which data is read out (required)
     * @param batchSize Max count of events to be returned (required)
     * @return EventsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventsPage eventsGetEvents(String fromId, Integer batchSize) throws ApiException {
        ApiResponse<EventsPage> resp = eventsGetEventsWithHttpInfo(fromId, batchSize);
        return resp.getData();
    }

    /**
     * Shows docflow events for all users and accounts connected with external service (e.g.: bank)
     * 
     * @param fromId Event Id from which data is read out (required)
     * @param batchSize Max count of events to be returned (required)
     * @return ApiResponse&lt;EventsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventsPage> eventsGetEventsWithHttpInfo(String fromId, Integer batchSize) throws ApiException {
        com.squareup.okhttp.Call call = eventsGetEventsValidateBeforeCall(fromId, batchSize, null, null);
        Type localVarReturnType = new TypeToken<EventsPage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Shows docflow events for all users and accounts connected with external service (e.g.: bank) (asynchronously)
     * 
     * @param fromId Event Id from which data is read out (required)
     * @param batchSize Max count of events to be returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsGetEventsAsync(String fromId, Integer batchSize, final ApiCallback<EventsPage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsGetEventsValidateBeforeCall(fromId, batchSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventsPage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
