/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.service.transport.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UsnFormatPeriod
 */

public class UsnFormatPeriod {
  /**
   * Gets or Sets periodModifiers
   */
  @JsonAdapter(PeriodModifiersEnum.Adapter.class)
  public enum PeriodModifiersEnum {
    NONE("none"),
    
    LIQUIDATIONREORGANIZATION("liquidationReorganization"),
    
    TAXREGIMECHANGE("taxRegimeChange"),
    
    LASTPERIODFORTAXREGIME("lastPeriodForTaxRegime");

    private String value;

    PeriodModifiersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodModifiersEnum fromValue(String text) {
      for (PeriodModifiersEnum b : PeriodModifiersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PeriodModifiersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodModifiersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodModifiersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PeriodModifiersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("period-modifiers")
  private PeriodModifiersEnum periodModifiers = null;

  @SerializedName("year")
  private Integer year = null;

  public UsnFormatPeriod periodModifiers(PeriodModifiersEnum periodModifiers) {
    this.periodModifiers = periodModifiers;
    return this;
  }

   /**
   * Get periodModifiers
   * @return periodModifiers
  **/
  @ApiModelProperty(value = "")
  public PeriodModifiersEnum getPeriodModifiers() {
    return periodModifiers;
  }

  public void setPeriodModifiers(PeriodModifiersEnum periodModifiers) {
    this.periodModifiers = periodModifiers;
  }

  public UsnFormatPeriod year(Integer year) {
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @ApiModelProperty(value = "")
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsnFormatPeriod usnFormatPeriod = (UsnFormatPeriod) o;
    return Objects.equals(this.periodModifiers, usnFormatPeriod.periodModifiers) &&
        Objects.equals(this.year, usnFormatPeriod.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periodModifiers, year);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsnFormatPeriod {\n");
    
    sb.append("    periodModifiers: ").append(toIndentedString(periodModifiers)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

