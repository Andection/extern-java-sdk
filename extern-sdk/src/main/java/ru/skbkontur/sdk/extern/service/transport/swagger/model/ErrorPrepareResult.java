/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.service.transport.swagger.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.CheckResultData;
import ru.skbkontur.sdk.extern.service.transport.swagger.model.Link;

/**
 * ErrorPrepareResult
 */

public class ErrorPrepareResult {
  @SerializedName("check-result")
  private CheckResultData checkResult = null;

  @SerializedName("links")
  private List<Link> links = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CHECKPROTOCOLHASERRORS("checkProtocolHasErrors"),
    
    CHECKPROTOCOLHASONLYWARNINGS("checkProtocolHasOnlyWarnings"),
    
    ENCRYPTIONFAILED("encryptionFailed"),
    
    OK("ok");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Gets or Sets statusCode
   */
  @JsonAdapter(StatusCodeEnum.Adapter.class)
  public enum StatusCodeEnum {
    CONTINUE("continue"),
    
    SWITCHINGPROTOCOLS("switchingProtocols"),
    
    OK("oK"),
    
    CREATED("created"),
    
    ACCEPTED("accepted"),
    
    NONAUTHORITATIVEINFORMATION("nonAuthoritativeInformation"),
    
    NOCONTENT("noContent"),
    
    RESETCONTENT("resetContent"),
    
    PARTIALCONTENT("partialContent"),
    
    MULTIPLECHOICES("multipleChoices"),
    
    AMBIGUOUS("ambiguous"),
    
    MOVEDPERMANENTLY("movedPermanently"),
    
    MOVED("moved"),
    
    FOUND("found"),
    
    REDIRECT("redirect"),
    
    SEEOTHER("seeOther"),
    
    REDIRECTMETHOD("redirectMethod"),
    
    NOTMODIFIED("notModified"),
    
    USEPROXY("useProxy"),
    
    UNUSED("unused"),
    
    TEMPORARYREDIRECT("temporaryRedirect"),
    
    REDIRECTKEEPVERB("redirectKeepVerb"),
    
    BADREQUEST("badRequest"),
    
    UNAUTHORIZED("unauthorized"),
    
    PAYMENTREQUIRED("paymentRequired"),
    
    FORBIDDEN("forbidden"),
    
    NOTFOUND("notFound"),
    
    METHODNOTALLOWED("methodNotAllowed"),
    
    NOTACCEPTABLE("notAcceptable"),
    
    PROXYAUTHENTICATIONREQUIRED("proxyAuthenticationRequired"),
    
    REQUESTTIMEOUT("requestTimeout"),
    
    CONFLICT("conflict"),
    
    GONE("gone"),
    
    LENGTHREQUIRED("lengthRequired"),
    
    PRECONDITIONFAILED("preconditionFailed"),
    
    REQUESTENTITYTOOLARGE("requestEntityTooLarge"),
    
    REQUESTURITOOLONG("requestUriTooLong"),
    
    UNSUPPORTEDMEDIATYPE("unsupportedMediaType"),
    
    REQUESTEDRANGENOTSATISFIABLE("requestedRangeNotSatisfiable"),
    
    EXPECTATIONFAILED("expectationFailed"),
    
    UPGRADEREQUIRED("upgradeRequired"),
    
    INTERNALSERVERERROR("internalServerError"),
    
    NOTIMPLEMENTED("notImplemented"),
    
    BADGATEWAY("badGateway"),
    
    SERVICEUNAVAILABLE("serviceUnavailable"),
    
    GATEWAYTIMEOUT("gatewayTimeout"),
    
    HTTPVERSIONNOTSUPPORTED("httpVersionNotSupported");

    private String value;

    StatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusCodeEnum fromValue(String text) {
      for (StatusCodeEnum b : StatusCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status-code")
  private StatusCodeEnum statusCode = null;

  @SerializedName("message")
  private String message = null;

  @SerializedName("track-id")
  private String trackId = null;

  @SerializedName("properties")
  private Map<String, String> properties = null;

  public ErrorPrepareResult checkResult(CheckResultData checkResult) {
    this.checkResult = checkResult;
    return this;
  }

   /**
   * Get checkResult
   * @return checkResult
  **/
  @ApiModelProperty(value = "")
  public CheckResultData getCheckResult() {
    return checkResult;
  }

  public void setCheckResult(CheckResultData checkResult) {
    this.checkResult = checkResult;
  }

  public ErrorPrepareResult links(List<Link> links) {
    this.links = links;
    return this;
  }

  public ErrorPrepareResult addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<Link>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public List<Link> getLinks() {
    return links;
  }

  public void setLinks(List<Link> links) {
    this.links = links;
  }

  public ErrorPrepareResult status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ErrorPrepareResult id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "urn:nss:nid", value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ErrorPrepareResult statusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @ApiModelProperty(value = "")
  public StatusCodeEnum getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(StatusCodeEnum statusCode) {
    this.statusCode = statusCode;
  }

  public ErrorPrepareResult message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @ApiModelProperty(value = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public ErrorPrepareResult trackId(String trackId) {
    this.trackId = trackId;
    return this;
  }

   /**
   * Get trackId
   * @return trackId
  **/
  @ApiModelProperty(value = "")
  public String getTrackId() {
    return trackId;
  }

  public void setTrackId(String trackId) {
    this.trackId = trackId;
  }

  public ErrorPrepareResult properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public ErrorPrepareResult putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<String, String>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorPrepareResult errorPrepareResult = (ErrorPrepareResult) o;
    return Objects.equals(this.checkResult, errorPrepareResult.checkResult) &&
        Objects.equals(this.links, errorPrepareResult.links) &&
        Objects.equals(this.status, errorPrepareResult.status) &&
        Objects.equals(this.id, errorPrepareResult.id) &&
        Objects.equals(this.statusCode, errorPrepareResult.statusCode) &&
        Objects.equals(this.message, errorPrepareResult.message) &&
        Objects.equals(this.trackId, errorPrepareResult.trackId) &&
        Objects.equals(this.properties, errorPrepareResult.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkResult, links, status, id, statusCode, message, trackId, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorPrepareResult {\n");
    
    sb.append("    checkResult: ").append(toIndentedString(checkResult)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

