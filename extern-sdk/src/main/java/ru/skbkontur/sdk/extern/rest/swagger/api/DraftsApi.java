/*
 * Kontur.Extern.Api.Public
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ru.skbkontur.sdk.extern.rest.swagger.api;

import ru.skbkontur.sdk.extern.rest.swagger.invoker.ApiCallback;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.ApiClient;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.ApiException;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.ApiResponse;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.Configuration;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.Pair;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.ProgressRequestBody;
import ru.skbkontur.sdk.extern.rest.swagger.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ru.skbkontur.sdk.extern.rest.swagger.model.DraftMeta;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DraftsApi {
    private ApiClient apiClient;

    public DraftsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DraftsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for draftsCheck
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsCheckCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}/check"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deffered != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deffered", deffered));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsCheckValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsCheck(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsCheck(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsCheck(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsCheck(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsCheckCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsCheck(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered) throws ApiException {
        ApiResponse<Object> resp = draftsCheckWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey, deffered);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsCheckWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered) throws ApiException {
        com.squareup.okhttp.Call call = draftsCheckValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsCheckAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsCheckValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsCreate
     * @param billingAccountId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsCreateCall(UUID billingAccountId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientInfo;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsCreateValidateBeforeCall(UUID billingAccountId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsCreate(Async)");
        }
        
        // verify the required parameter 'clientInfo' is set
        if (clientInfo == null) {
            throw new ApiException("Missing the required parameter 'clientInfo' when calling draftsCreate(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsCreate(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsCreate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsCreateCall(billingAccountId, clientInfo, authorization, xKonturApikey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsCreate(UUID billingAccountId, DraftMeta clientInfo, String authorization, String xKonturApikey) throws ApiException {
        ApiResponse<Object> resp = draftsCreateWithHttpInfo(billingAccountId, clientInfo, authorization, xKonturApikey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsCreateWithHttpInfo(UUID billingAccountId, DraftMeta clientInfo, String authorization, String xKonturApikey) throws ApiException {
        com.squareup.okhttp.Call call = draftsCreateValidateBeforeCall(billingAccountId, clientInfo, authorization, xKonturApikey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsCreateAsync(UUID billingAccountId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsCreateValidateBeforeCall(billingAccountId, clientInfo, authorization, xKonturApikey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsDeleteDraft
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsDeleteDraftCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsDeleteDraftValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsDeleteDraft(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsDeleteDraft(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsDeleteDraft(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsDeleteDraft(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsDeleteDraftCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsDeleteDraft(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        ApiResponse<Object> resp = draftsDeleteDraftWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsDeleteDraftWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        com.squareup.okhttp.Call call = draftsDeleteDraftValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsDeleteDraftAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsDeleteDraftValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsGetDraft
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsGetDraftCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsGetDraftValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsGetDraft(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsGetDraft(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsGetDraft(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsGetDraft(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsGetDraftCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsGetDraft(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        ApiResponse<Object> resp = draftsGetDraftWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsGetDraftWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        com.squareup.okhttp.Call call = draftsGetDraftValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsGetDraftAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsGetDraftValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsGetMeta
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsGetMetaCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}/meta"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsGetMetaValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsGetMeta(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsGetMeta(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsGetMeta(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsGetMeta(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsGetMetaCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsGetMeta(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        ApiResponse<Object> resp = draftsGetMetaWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsGetMetaWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey) throws ApiException {
        com.squareup.okhttp.Call call = draftsGetMetaValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsGetMetaAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsGetMetaValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsPrepare
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsPrepareCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}/prepare"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deffered != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deffered", deffered));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsPrepareValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsPrepare(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsPrepare(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsPrepare(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsPrepare(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsPrepareCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsPrepare(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered) throws ApiException {
        ApiResponse<Object> resp = draftsPrepareWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey, deffered);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsPrepareWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered) throws ApiException {
        com.squareup.okhttp.Call call = draftsPrepareValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsPrepareAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsPrepareValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsSend
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param force  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsSendCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/drafts/{draftId}/send"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (deffered != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "deffered", deffered));
        if (force != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsSendValidateBeforeCall(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsSend(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsSend(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsSend(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsSend(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsSendCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, force, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param force  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsSend(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, Boolean force) throws ApiException {
        ApiResponse<Object> resp = draftsSendWithHttpInfo(billingAccountId, draftId, authorization, xKonturApikey, deffered, force);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param force  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsSendWithHttpInfo(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, Boolean force) throws ApiException {
        com.squareup.okhttp.Call call = draftsSendValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, force, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param deffered  (optional)
     * @param force  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsSendAsync(UUID billingAccountId, UUID draftId, String authorization, String xKonturApikey, Boolean deffered, Boolean force, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsSendValidateBeforeCall(billingAccountId, draftId, authorization, xKonturApikey, deffered, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for draftsUpdateDraftMeta
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call draftsUpdateDraftMetaCall(UUID billingAccountId, UUID draftId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = clientInfo;
        
        // create path and map variables
        String localVarPath = "/v1/{billingAccountId}/drafts/{draftId}/meta"
            .replaceAll("\\{" + "billingAccountId" + "\\}", apiClient.escapeString(billingAccountId.toString()))
            .replaceAll("\\{" + "draftId" + "\\}", apiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (xKonturApikey != null)
        localVarHeaderParams.put("X-Kontur-Apikey", apiClient.parameterToString(xKonturApikey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call draftsUpdateDraftMetaValidateBeforeCall(UUID billingAccountId, UUID draftId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling draftsUpdateDraftMeta(Async)");
        }
        
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling draftsUpdateDraftMeta(Async)");
        }
        
        // verify the required parameter 'clientInfo' is set
        if (clientInfo == null) {
            throw new ApiException("Missing the required parameter 'clientInfo' when calling draftsUpdateDraftMeta(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling draftsUpdateDraftMeta(Async)");
        }
        
        // verify the required parameter 'xKonturApikey' is set
        if (xKonturApikey == null) {
            throw new ApiException("Missing the required parameter 'xKonturApikey' when calling draftsUpdateDraftMeta(Async)");
        }
        
        
        com.squareup.okhttp.Call call = draftsUpdateDraftMetaCall(billingAccountId, draftId, clientInfo, authorization, xKonturApikey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object draftsUpdateDraftMeta(UUID billingAccountId, UUID draftId, DraftMeta clientInfo, String authorization, String xKonturApikey) throws ApiException {
        ApiResponse<Object> resp = draftsUpdateDraftMetaWithHttpInfo(billingAccountId, draftId, clientInfo, authorization, xKonturApikey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> draftsUpdateDraftMetaWithHttpInfo(UUID billingAccountId, UUID draftId, DraftMeta clientInfo, String authorization, String xKonturApikey) throws ApiException {
        com.squareup.okhttp.Call call = draftsUpdateDraftMetaValidateBeforeCall(billingAccountId, draftId, clientInfo, authorization, xKonturApikey, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param billingAccountId  (required)
     * @param draftId  (required)
     * @param clientInfo  (required)
     * @param authorization  (required)
     * @param xKonturApikey  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call draftsUpdateDraftMetaAsync(UUID billingAccountId, UUID draftId, DraftMeta clientInfo, String authorization, String xKonturApikey, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = draftsUpdateDraftMetaValidateBeforeCall(billingAccountId, draftId, clientInfo, authorization, xKonturApikey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
